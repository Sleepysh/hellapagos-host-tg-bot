package com.example.hellapagos_host_bot.service;

import com.example.hellapagos_host_bot.model.GameCharacter;
import com.example.hellapagos_host_bot.model.GameEvent;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;


import java.util.*;
import java.util.stream.Collectors;

@Component
public class GameService {
    private final HashMap<Long, Map<String,GameCharacter>> playingRightNow = new HashMap<>();
    private final HashMap<Long, List<GameEvent>> eventsBathes = new HashMap<>();
    private final Set<Long> awaitingForListOfPlayers= new HashSet<>();
    private final BotMessageService messageService;
    private final CharacterService characterService;
    private final EventService eventService;

    public GameService(BotMessageService messageService, CharacterService characterService, EventService eventService) {
        this.messageService = messageService;
        this.characterService = characterService;
        this.eventService = eventService;
    }

    public HashMap<Long, Map<String, GameCharacter>> getPlayingRightNow() {
        return playingRightNow;
    }

    public HashMap<Long, List<GameEvent>> getEventsBathes() {
        return eventsBathes;
    }

    public Set<Long> getAwaitingForListOfPlayers() {
        return awaitingForListOfPlayers;
    }

    public void newGameQuery(Long chatId) {
            messageService.fastExecute(chatId,"–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Å–ø–∏—Å–æ–∫ –ø–æ–ø–∞–¥–∞–Ω—Ü—ñ–≤");
            addToAwaiting(chatId);

    }

    public void addToAwaiting(Long chatId) {
        awaitingForListOfPlayers.add(chatId);
    }

    public boolean isAwaiting(Long chatId) {
        return awaitingForListOfPlayers.contains(chatId);
    }

    public boolean isPlaying(Long chatId) {
        return playingRightNow.containsKey(chatId);
    }


    public void removeFromAwaiting(Long chatId) {
        if (awaitingForListOfPlayers.contains(chatId))
            awaitingForListOfPlayers.remove(chatId);

    }

    public void removeFromPlaying(Long chatId) {
        if (playingRightNow.containsKey(chatId))
            playingRightNow.remove(chatId);
    }

    public void endGame(Long chatId) {
        if (playingRightNow.containsKey(chatId))
            playingRightNow.remove(chatId);

        if (awaitingForListOfPlayers.contains(chatId))
            awaitingForListOfPlayers.remove(chatId);

        if (eventsBathes.containsKey(chatId))
            eventsBathes.remove(chatId);
    }

    public void restartGame(CallbackQuery callback) {
        eventsBathes.put(callback.getMessage().getChatId(), new ArrayList<>());
        shuffleRoles(callback);
    }

    public void saveNewPlayers(Long chatId, String players) {
        List<String> listOfPlayers = Arrays.stream(players.split(", ")).collect(Collectors.toSet()).stream().toList();
        List<GameCharacter> listOfCharacters = characterService.getRandomCharacters(listOfPlayers.size());
        Map<String, GameCharacter> gameSession = new HashMap<>();

        for (int i = 0; i < listOfPlayers.size(); i++) {
            gameSession.put(listOfPlayers.get(i), listOfCharacters.get(i));
        }


        playingRightNow.put(chatId, gameSession);

        messageService.fastExecute(chatId,
                convertListOfPlayersToString(listOfPlayers).concat("\n –ü–æ—á–Ω–µ–º–æ –∫—Ä—É—ó–∑?"),
                List.of("\uD83D\uDC79 –ü–æ—á–∞—Ç–∏ –≤–∏–∂–∏–≤–∞–Ω–Ω—è", "\uD83D\uDE45 –ó–∞–ª–∏—à–∏—Ç–∏ –æ—Å—Ç—Ä—ñ–≤"),
                List.of("approve-players", "cancel-game-creating"));

        eventsBathes.put(chatId, new ArrayList<>());


        removeFromAwaiting(chatId);
    }

    private static String convertListOfPlayersToString(List<String> players) {
        StringBuilder enumerationPlayers = new StringBuilder("\uD83D\uDCCB –°–ø–∏—Å–æ–∫ –≤–∏–∂–∏–≤–∞–ª—å–Ω–∏–∫—ñ–≤:\n");
        for(int i = 0; i < players.size(); i++) {
            enumerationPlayers.append("üßç ").append(i + 1).append(". ").append(players.get(i)).append("\n");
        }
        return enumerationPlayers.toString();
    }

    public void gameMenu(Long chatId) {
        String message = """
            üèùÔ∏è *–í–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤—ñ...*

            ‚õµ –ü–ª—ñ—Ç —â–µ –Ω–µ –≥–æ—Ç–æ–≤–∏–π.
            üç∂ –í–æ–¥–∞ –æ–±–º–µ–∂–µ–Ω–∞.
            üçΩÔ∏è –á–∂—ñ –∑–∞–º–∞–ª–æ.
            üßç –¢–∞ –≥—Ä–∞–≤—Ü—ñ–≤ ‚Äî –±—ñ–ª—å—à–µ, –Ω—ñ–∂ –ø–æ—Ç—Ä—ñ–±–Ω–æ.

            –î—É–º–∞–π—Ç–µ —è–∫ –≤–∏–∂–∏—Ç–∏ üëπ
            """;

        messageService.fastExecute(
                chatId,
                message,
                List.of(
                        "üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–ª—ñ",
                        "üìú –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–¥—ñ—é",
                        "\uD83D\uDCDD–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –ø–æ–¥—ñ—ó",
                        "\uD83D\uDD04–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Å—Ç—ñ–π–Ω—ñ –ø–æ–¥—ñ—ó",
                        "‚ôªÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–ª—ñ",
                        "üîÅ –ü–æ—á–∞—Ç–∏ –∑ –ø–æ—á–∞—Ç–∫—É",
                        "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≥—Ä—É"
                ),
                List.of(
                        "view-roles",
                        "get-event",
                        "view-all-events",
                        "view-permanent-events",
                        "shuffle-roles",
                        "restart-game",
                        "end-game"
                )
        );
    }

    public void viewRoles(Long chatId) {
        messageService.fastExecute(chatId, getListOfAssignedRoles(chatId));
    }

    private String getListOfAssignedRoles(Long chatId) {
        StringBuilder listOfAssignedRoles = new StringBuilder("üé≠ *–ü—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ —Ä–æ–ª—ñ –≥—Ä–∞–≤—Ü—ñ–≤:*\n\n");

        for (Map.Entry<String, GameCharacter> role : playingRightNow.get(chatId).entrySet()) {
            listOfAssignedRoles
                    .append("üßç‚Äç‚ôÇÔ∏è *").append(role.getKey()).append("*\n")
                    .append("üî∏ –†–æ–ª—å: _").append(role.getValue().getName()).append("_\n")
                    .append("üí¨ _¬´").append(role.getValue().getQuote()).append("¬ª_ \n")
                    .append("üìú *–û—Å–æ–±–ª–∏–≤—ñ—Å—Ç—å:* ").append(role.getValue().getSpecialConditions())
                    .append("\n\n");
        }

        return listOfAssignedRoles.toString();
    }

    public void shuffleRoles(CallbackQuery callbackQuery) {
        Long chatId = callbackQuery.getMessage().getChatId();
        int size = playingRightNow.get(chatId).size();
        List<GameCharacter> listOfCharacters = characterService.getRandomCharacters(size);

        for (Map.Entry<String, GameCharacter> role : playingRightNow.get(chatId).entrySet()) {
            playingRightNow.get(chatId).put(role.getKey(), listOfCharacters.removeFirst());
        }

        messageService.fastAnswer(callbackQuery.getId(), "–Ø –ø–µ—Ä–µ–º—ñ—à–∞–≤ –≤–∞—à—ñ —Ä–æ–ª—ñ ‚òØ");

    }


    public void generateEvent(Long chatId) {
        int value = (int)(Math.random()*100);
        if (value <= 20) {
            eventsBathes.get(chatId).add(new GameEvent("–ó–≤–∏—á–∞–π–Ω–∏–π –¥–µ–Ω—å \uD83C\uDFDD",
                    "–°–æ–Ω—Ü–µ –ø–æ–≤—ñ–ª—å–Ω–æ –∑–∞—Ö–æ–¥–∏—Ç—å –∑–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç, —Ö–≤–∏–ª—ñ –Ω—ñ–∂–Ω–æ –æ–º–∏–≤–∞—é—Ç—å –±–µ—Ä–µ–≥... \uD83C\uDF05 \n",
                    "–¶—å–æ–≥–æ —Ä–∞–∑—É –¥–µ–Ω—å –º–∏–Ω–∞—î —Å–ø–æ–∫—ñ–π–Ω–æ. –ñ–æ–¥–Ω–∏—Ö –ø—Ä–∏–≥–æ–¥, –∂–æ–¥–Ω–∏—Ö –Ω–µ–ø—Ä–∏—î–º–Ω–æ—Å—Ç–µ–π.",
                    "one-time"));
        } else {
            eventsBathes.get(chatId).add(eventService.getRandomEvents());
        }

        getLastEvent(chatId);
    }

    private void getLastEvent(Long chatId) {
        GameEvent event = eventsBathes.get(chatId).getLast();

        String formattedEvent = """
        üå¥ *%s* üå¥

        _"%s"_

        %s
        """.formatted(
                (event.getDuration().equals("permanent") ? "\uD83D\uDD04 " : "1\uFE0F‚É£ ") + event.getName(),
                event.getQuote(),
                event.getEventDescription()
        );
        messageService.fastExecute(chatId, formattedEvent);
    }

    public void viewAllEvents(Long chatId, String callbackId) {
        List<GameEvent> events = eventsBathes.get(chatId);

        if (events == null || events.isEmpty()) {
            messageService.fastAnswer(callbackId, "–ü–æ–¥—ñ—ó —â–µ –Ω–µ —Ä–æ–∑–ø–æ—á–∞–ª–∏—Å—è üåä");
            return;
        }

        StringBuilder allEvents = new StringBuilder("üìù *–í—Å—ñ –ø–æ–¥—ñ—ó –¥–æ —Ü—å–æ–≥–æ –º–æ–º–µ–Ω—Ç—É:*\n\n");

        for (GameEvent event : events) {
            allEvents.append("üå¥ *").append(event.getName()).append("*\n")
                    .append("_\"").append(event.getQuote()).append("\"_\n")
                    .append(event.getEventDescription()).append("\n\n ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ \n");
        }

        messageService.fastExecute(chatId, allEvents.toString(), List.of("\uD83D\uDD04 –ü–æ—Å—Ç—ñ–π–Ω—ñ –ø–æ–¥—ñ—ó"), List.of("view-permanent-events"));
    }

    public void putEvent(Long chatId, GameEvent gameEvent) {
        if (eventsBathes.containsKey(chatId)) {
            eventsBathes.get(chatId).add(gameEvent);

        } else {
            eventsBathes.put(chatId, new ArrayList<>(List.of(gameEvent)));
        }

    }

    public void viewPermanentEvents(Long chatId, String callbackId) {

        List<GameEvent> events = eventsBathes.get(chatId)
                                  .stream()
                                  .filter(event -> event.getDuration().equals("permanent")).toList();

        if (events == null || events.isEmpty()) {
            messageService.fastAnswer(callbackId, "–ü–æ–∫–∏ –≤–∏ –Ω–µ –º–∞—î—Ç–µ –ø–æ—Å—Ç—ñ–π–Ω–∏—Ö –ø–æ–¥—ñ–π üåä");
            return;
        }

        StringBuilder allEvents = new StringBuilder("üìù *–í—Å—ñ –ø–æ–¥—ñ—ó –ø–æ—Å—Ç—ñ–π–Ω—ñ –ø–æ–¥—ñ—ó –¥–æ —Ü—å–æ–≥–æ –º–æ–º–µ–Ω—Ç—É:*\n\n");

        for (GameEvent event : events) {
            allEvents.append("üå¥ *").append(event.getName()).append("*\n")
                    .append("_\"").append(event.getQuote()).append("\"_\n")
                    .append(event.getEventDescription()).append("\n\n ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ \n");
        }

        messageService.fastExecute(chatId, allEvents.toString());
    }


}
