package com.example.hellapagos_host_bot.handler;

import com.example.hellapagos_host_bot.service.BotMessageService;
import com.example.hellapagos_host_bot.service.GameService;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.util.List;


@Component
public class ButtonHandler {

    private final BotMessageService botMessageService;
    private final GameService gameService;

    public ButtonHandler(@Lazy BotMessageService botMessageService, @Lazy GameService gameService) {
        this.botMessageService = botMessageService;
        this.gameService = gameService;
    }

    public void handleCallback(CallbackQuery callback) {
        String callbackData  = callback.getData();
        Long chatId = callback.getMessage().getChatId();

        switch (callbackData) {
            case "start-game":
                botMessageService.startGameQuery(chatId);
                break;

            case "new-game":
                if(!gameService.isPlaying(chatId)) {
                    gameService.newGameQuery(chatId);
                } else {
                    botMessageService.fastAnswer(callback.getId(),"–í–∏ –≤–∂–µ –Ω–∞ –æ—Å—Ç—Ä–æ–≤—ñ!\uD83D\uDC7A");
                }
                break;

            case "approve-players":
                if (gameService.isPlaying(chatId)) {
                    gameService.gameMenu(chatId);
                } else {
                    botMessageService.fastAnswer(callback.getId(),"–ü–æ—á–Ω–∏ –Ω–æ–≤—É –≥—Ä—É!\uD83D\uDC7A");
                }
                break;

            case "view-roles":
                if (gameService.isPlaying(chatId)) {
                    gameService.viewRoles(chatId);
                } else {
                    botMessageService.fastAnswer(callback.getId(),"–°–ø–µ—Ä—à—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏—Ä—É—à–∏—Ç–∏ –≤ –∫—Ä—É—ó–∑!\uD83D\uDE24");
                }
                break;

            case "get-event":
                if (gameService.isPlaying(chatId)) {
                    gameService.generateEvent(chatId);
                } else {
                    botMessageService.fastAnswer(callback.getId(),"–°–ø–µ—Ä—à—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏—Ä—É—à–∏—Ç–∏ –≤ –∫—Ä—É—ó–∑!\uD83D\uDE24");
                }
                break;

            case "view-all-events":
                if (gameService.isPlaying(chatId)) {
                    gameService.viewAllEvents(chatId, callback.getId());
                } else {
                    botMessageService.fastAnswer(callback.getId(),"–°–ø–µ—Ä—à—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏—Ä—É—à–∏—Ç–∏ –≤ –∫—Ä—É—ó–∑!\uD83D\uDE24");
                }
                break;

            case "view-permanent-events":
                if (gameService.isPlaying(chatId)) {
                    gameService.viewPermanentEvents(chatId, callback.getId());
                } else {
                    botMessageService.fastAnswer(callback.getId(),"–°–ø–µ—Ä—à—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏—Ä—É—à–∏—Ç–∏ –≤ –∫—Ä—É—ó–∑!\uD83D\uDE24");
                }
                break;

            case "shuffle-roles":
                if (gameService.isPlaying(chatId)) {
                    gameService.shuffleRoles(callback);
                } else {
                    botMessageService.fastAnswer(callback.getId(),"–°–ø–µ—Ä—à—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏—Ä—É—à–∏—Ç–∏ –≤ –∫—Ä—É—ó–∑!\uD83D\uDE24");
                }
                break;

            case "cancel-game-creating":
                if(gameService.isPlaying(chatId)) {
                    gameService.endGame(chatId);
                    botMessageService.fastAnswer(callback.getId(), "–Ø —Å–ø–∞–ª–∏–≤ —Å–ø–∏—Å–æ–∫ \uD83D\uDD25");
                    botMessageService.startGameQuery(chatId);
                } else {
                    botMessageService.fastAnswer(callback.getId(),"–í–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–ª–∏ —Å–ø–∏—Å–æ–∫!\uD83D\uDE24");
                }
                break;

            case "restart-game":
                if(gameService.isPlaying(chatId)) {
                gameService.restartGame(callback);
                botMessageService.fastAnswer(callback.getId(), "–ù–æ–≤–∞ –≥—Ä–∞, —Å–≤—ñ–∂—ñ –≥–æ–ª–æ–≤–∏, –Ω–æ–≤—ñ –ø–æ–¥—ñ—ó\uD83E\uDD65");
                } else {
                    botMessageService.fastAnswer(callback.getId(),"–°–ø–µ—Ä—à—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏—Ä—É—à–∏—Ç–∏ –≤ –∫—Ä—É—ó–∑!\uD83D\uDE24");
                }
                break;

            case "end-game":
                if(gameService.isPlaying(chatId)) {
                gameService.endGame(chatId);
                botMessageService.fastExecute(chatId, "–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û—Å—Ç—Ä—ñ–≤ –ø—Ä–æ—â–∞—î—Ç—å—Å—è –∑ –≤–∞–º–∏... üèùÔ∏èüòî");
                botMessageService.fastExecute(
                        chatId,
                        "–ë–∞–∂–∞—î—Ç–µ –∑–Ω–æ–≤—É —Å—Ç—É–ø–∏—Ç–∏ –Ω–∞ –±–µ—Ä–µ–≥ –ì–µ–ª–ª–∞–ø–∞–≥–æ—Å–∞? üåäü¶ú",
                        List.of("–¢–∞–∫, –≤–∏—Ä—É—à–∞–π–º–æ!"),
                        List.of("start-game")
                );
                } else {
                    botMessageService.fastAnswer(callback.getId(),"–°–ø–µ—Ä—à—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏—Ä—É—à–∏—Ç–∏ –≤ –∫—Ä—É—ó–∑!\uD83D\uDE24");
                }
                break;
        }
    }
}
